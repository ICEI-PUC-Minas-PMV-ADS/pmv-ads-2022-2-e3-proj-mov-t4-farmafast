{"version":3,"sources":["PreventRemoveProvider.tsx"],"names":["transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","parentId","React","useState","setPreventedRoutesMap","Map","navigation","useContext","NavigationHelpersContext","route","NavigationRouteContext","preventRemoveContextValue","PreventRemoveContext","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]}