{"version":3,"sources":["usePreventRemove.tsx"],"names":["usePreventRemove","preventRemove","callback","id","React","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;AACA,QAAM,CAACC,EAAD,IAAOC,KAAK,CAACC,QAAN,CAAe,MAAM,wBAArB,CAAb;AAEA,QAAMC,UAAU,GAAG,6BAAnB;AACA,QAAM;AAAEC,IAAAA,GAAG,EAAEC;AAAP,MAAoB,wBAA1B;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAuB,uCAA7B;AAEAL,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpBD,IAAAA,gBAAgB,CAACN,EAAD,EAAKK,QAAL,EAAeP,aAAf,CAAhB;AACA,WAAO,MAAM;AACXQ,MAAAA,gBAAgB,CAACN,EAAD,EAAKK,QAAL,EAAe,KAAf,CAAhB;AACD,KAFD;AAGD,GALD,EAKG,CAACC,gBAAD,EAAmBN,EAAnB,EAAuBK,QAAvB,EAAiCP,aAAjC,CALH;AAOA,QAAMU,oBAAoB,GAAG,gCAE1BC,CAAD,IAAO;AACP,QAAI,CAACX,aAAL,EAAoB;AAClB;AACD;;AAEDW,IAAAA,CAAC,CAACC,cAAF;AAEAX,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAEF,CAAC,CAACE;AAAV,KAAD,CAAR;AACD,GAV4B,CAA7B;AAYAV,EAAAA,KAAK,CAACM,SAAN,CACE,MAAMJ,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAES,WAAZ,CAAwB,cAAxB,EAAwCJ,oBAAxC,CADR,EAEE,CAACL,UAAD,EAAaK,oBAAb,CAFF;AAID","sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]}