{"version":3,"sources":["usePreventRemove.tsx"],"names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","id","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"mappings":"AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAGA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;AACA,QAAM,CAACC,EAAD,IAAOR,KAAK,CAACS,QAAN,CAAe,MAAMV,MAAM,EAA3B,CAAb;AAEA,QAAMW,UAAU,GAAGR,aAAa,EAAhC;AACA,QAAM;AAAES,IAAAA,GAAG,EAAEC;AAAP,MAAoBR,QAAQ,EAAlC;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAuBV,uBAAuB,EAApD;AAEAH,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBD,IAAAA,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAeN,aAAf,CAAhB;AACA,WAAO,MAAM;AACXO,MAAAA,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAe,KAAf,CAAhB;AACD,KAFD;AAGD,GALD,EAKG,CAACC,gBAAD,EAAmBL,EAAnB,EAAuBI,QAAvB,EAAiCN,aAAjC,CALH;AAOA,QAAMS,oBAAoB,GAAGd,iBAAiB,CAE3Ce,CAAD,IAAO;AACP,QAAI,CAACV,aAAL,EAAoB;AAClB;AACD;;AAEDU,IAAAA,CAAC,CAACC,cAAF;AAEAV,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEF,CAAC,CAACE;AAAV,KAAD,CAAR;AACD,GAV6C,CAA9C;AAYAlB,EAAAA,KAAK,CAACc,SAAN,CACE,MAAMJ,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAES,WAAZ,CAAwB,cAAxB,EAAwCJ,oBAAxC,CADR,EAEE,CAACL,UAAD,EAAaK,oBAAb,CAFF;AAID","sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]}